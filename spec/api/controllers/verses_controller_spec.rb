require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::VersesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Verse. As you add validations to Verse, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {id: 1, line_one: "A beautiful verse I stand"}
  }

  let(:invalid_attributes) {
    {id: 1, line_one: ""}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VersesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all verses as @verses" do
      @verse = create(:verse)
      get :index, format: :json
      expect(assigns(:verses)).to eq([@verse])
    end
  end

  describe "GET show" do
    it "should return status 200 when viewing existing verse" do
      @verse = create(:verse)
      get :show, {id: @verse.to_param, format: :json}
      expect(response).to have_http_status(200)
    end

    it "should return RecordNotFound Error when viewing non existing verse" do
      product_id = 9999
      assert_raises(ActiveRecord::RecordNotFound) do
        get :show, id: product_id
      end
    end

    it "assigns the requested verse as @verse" do
      @verse = create(:verse)
      get :show, {:id => @verse.to_param, format: :json}
      expect(assigns(:verse)).to eq(@verse)
    end
  end

  #describe "GET new" do
  #  it "assigns a new verse as @verse" do
  #    get :new, {}, valid_session
  #    expect(assigns(:verse)).to be_a_new(Verse)
  #  end
  #end

  #describe "GET edit" do
  #  it "assigns the requested verse as @verse" do
  #    verse = Verse.create! valid_attributes
  #    get :edit, {:id => verse.to_param}, valid_session
  #    expect(assigns(:verse)).to eq(verse)
  #  end
  #end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Verse" do
        expect {
          post :create, {:verse => valid_attributes, format: :json}, valid_session 
        }.to change(Verse, :count).by(1)
      end

      it "assigns a newly created verse as verse" do
        post :create, {:verse => valid_attributes, format: :json}, valid_session
        expect(assigns(:verse)).to be_a(Verse)
        expect(assigns(:verse)).to be_persisted
      end

      it "has a 201 created status code" do
        post :create, {:verse => valid_attributes, format: :json}, valid_session
        expect(response).to have_http_status(201)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved verse as verse" do
        post :create, {:verse => invalid_attributes, format: :json}, valid_session
        expect(assigns(:verse)).to be_a_new(Verse)
      end

      it "returns a 422 unprocessable entity status code" do
        post :create, {:verse => invalid_attributes, format: :json}, valid_session
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {id: 4, line_one: "This is my updated verse line"}
      }

      it "updates the requested verse" do
        @verse = create(:verse)
        put :update, {:id => @verse.to_param, :verse => new_attributes, format: :json}, valid_session
        @verse.reload
        @verse.line_one.should eq("This is my updated verse line")
      end

      it "assigns the requested verse as verse" do
        @verse = create(:verse)
        put :update, {:id => @verse.to_param, :verse => valid_attributes, format: :json}, valid_session
        expect(assigns(:verse)).to eq(@verse)
      end

      it "returns a status ok status code 200" do
        @verse = create(:verse)
        put :update, {:id => @verse.to_param, :verse => valid_attributes, format: :json}, valid_session
        #expect(response).to redirect_to(@verse)
        expect(response).to have_http_status(200)
      end
    end

    describe "with invalid params" do
      it "assigns the verse as verse" do
        @verse = create(:verse)
        put :update, {:id => @verse.to_param, :verse => invalid_attributes, format: :json}, valid_session
        expect(assigns(:verse)).to eq(@verse)
      end

      it "returns a 422 unprocessable entity status code" do
        @verse = create(:verse)
        put :update, {:id => @verse.to_param, :verse => invalid_attributes, format: :json}, valid_session
        #expect(response).to render_template("edit")
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested verse" do
      @verse = create(:verse)
      expect {
        delete :destroy, {:id => @verse.to_param, format: :json}, valid_session
      }.to change(Verse, :count).by(-1)
    end

    it "returns a status ok status code 200" do
      @verse = create(:verse)
      delete :destroy, {:id => @verse.to_param, format: :json}, valid_session
      expect(response).to have_http_status(200)
      #expect(response).to redirect_to(verses_url)
    end
  end

end
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::QuestionnaireController, :type => :controller do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VersesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET relationship" do
    before(:each) do
      create(:relationship_bro)
      create(:relationship_brother)
      create(:relationship_cousin)
      create(:relationship_father)
      create(:relationship_friend)
      create(:relationship_heartbeat)
    end
    it "returns matching relationship record when theres one match" do
      expected = ["father"]
      get :relationship, {search: 'fath', format: :json}, valid_session
      expect(JSON.parse(response.body)).to eq(expected)
    end
    it "returns matching relationship records when search matches many" do
      expected = ["bro", "brother"]
      get :relationship, {search: 'bro', format: :json}, valid_session
      expect(JSON.parse(response.body)).to eq(expected)
    end
    it "returns http response status 200 when results are found" do
      get :relationship, {search: 'fath', format: :json}, valid_session
      expect(response).to have_http_status(200)
    end
    it "returns http response status 204 no-content when no match" do
      get :relationship, {search: 'xxxbb', format: :json}, valid_session
      expect(response).to have_http_status(:no_content)
    end
  end

  describe "GET trait" do
    before(:each) do
      create(:trait_category)
      create(:trait_category_artistic)
      create(:trait_category_courageous)
      create(:trait_category_fatherly)
      create(:trait_category_friendly)
      create(:trait_category_philosophical)
    end
    it "returns matching trait record when theres one match" do
      expected = ["friendly amiable outgoing sociable"]
      get :trait, {search: 'amiable', format: :json}, valid_session
      expect(JSON.parse(response.body)).to eq(expected)
    end
    it "returns matching trait records when search matches many" do
      expected = ["appreciative grateful thankful", "courageous brave lionhearted"]
      get :trait, {search: 'ra', format: :json}, valid_session
      expect(JSON.parse(response.body)).to eq(expected)
    end
    it "returns http response status 200 when results are found" do
      get :trait, {search: 'amiable', format: :json}, valid_session
      expect(response).to have_http_status(200)
    end
    it "returns http response status 204 no-content when no match" do
      get :trait, {search: 'xxxbb', format: :json}, valid_session
      expect(response).to have_http_status(:no_content)
    end
  end

  describe "GET message" do
    before(:each) do
      create(:message_category)
      create(:message_category_congratulations)
      create(:message_category_girlfriend)
      create(:message_category_get_well)
      create(:message_category_miss_you)
      create(:message_category_wedding)
    end
    it "returns matching message record when theres one match" do
      expected = ["Congratulations"]
      get :message, {search: 'Congratulations', format: :json}, valid_session
      expect(JSON.parse(response.body)).to eq(expected)
    end
    it "returns matching message records when search matches many" do
      expected = ["You are my star", "I miss you"]
      get :message, {search: 'you', format: :json}, valid_session
      expect(JSON.parse(response.body)).to eq(expected)
    end
    it "returns http response status 200 when results are found" do
      get :message, {search: 'miss you', format: :json}, valid_session
      expect(response).to have_http_status(200)
    end
    it "returns http response status 204 no-content when no match" do
      get :message, {search: 'xxxbb', format: :json}, valid_session
      expect(response).to have_http_status(:no_content)
    end
  end


end
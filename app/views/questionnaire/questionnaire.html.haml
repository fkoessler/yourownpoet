#page-container
  / the links to our nested states using relative paths
  / add the active class if the state matches our ui-sref
  #status-buttons.text-center
    %a{"ui-sref" => "questionnaire.receiver_name", "ui-sref-active" => "active"}
      %span 1
      Receiver Name
    %a{"ui-sref" => "questionnaire.location", "ui-sref-active" => "active"}
      %span 2
      Location
    %a{"ui-sref" => "questionnaire.relationship", "ui-sref-active" => "active"}
      %span 3
      Relationship
    %a{"ui-sref" => "questionnaire.trait", "ui-sref-active" => "active"}
      %span 4
      Trait
    %a{"ui-sref" => "questionnaire.message", "ui-sref-active" => "active"}
      %span 5
      Message

  / use ng-submit to catch the form submission and use our Angular function

  %form#questionnaire-form{"ng-submit" => "processForm()", "novalidate" => "", name: "questionnaireForm"}
    .form-view-container
      / our nested state views will be injected here
      #form-views{"ui-view" => ""}

    / show our formData as it is being typed
    / %pre {{ formData }}

    /show validation errors here

    %p.bg-danger {{ errorReceiverName }}
    %p.bg-danger {{ errorLocation }}
    %p.bg-danger {{ errorRelationship }}
    %p.bg-danger {{ errorTrait }}
    %p.bg-danger {{ errorMessage }}

    = tag(:input, :type => "hidden", :name => request_forgery_protection_token.to_s, :value => form_authenticity_token)
    %div.text-center.submit-button
      %button.btn.btn-success{type: "submit", "ng-disabled" => "isDisabled"} Write the Poem
